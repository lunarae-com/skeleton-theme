{% comment %}
  This template renders the product page with a vertical‑labels Swiper carousel,
  product details, and an add‑to‑cart form, all inline in product.liquid.
{% endcomment %}

<!-- include Swiper CSS -->
<link rel="stylesheet" href="https://unpkg.com/swiper/swiper-bundle.min.css" />

<style>
  /* Carousel + labels styling */
  .wrapper {
    position: relative;
    display: flex;
    height: 100vh;
    overflow: hidden;
  }

  .label-container {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    width: 100%;           /* span full wrapper width */
    pointer-events: none;
    z-index: 10;
  }

  .vertical-label {
    position: absolute;    /* anchor to container edges */
    left: 0;               /* default flush-left */
    writing-mode: vertical-rl;
    transform: rotate(180deg);
    color: white;
    font-size: 14px;
    text-align: center;
    transition: left .5s ease, color .3s ease;
    cursor: pointer;
    pointer-events: auto;
  }

  .vertical-label.shifted {
    left: calc(100% - 20px); /* anchor to right edge */
  }

  .swiper {
    width: 100%;
    height: 100%;
  }

  .swiper-slide {
    position: relative;
  }

  .swiper-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .caption {
    position: absolute;
    bottom: 20px;
    left: 80px;
    background: rgba(0,0,0,0.6);
    color: white;
    padding: 10px 14px;
    border-radius: 4px;
    font-size: 14px;
    z-index: 2;
  }

  /* fallback for small screens */
  @media(max-width: 768px) {
    .wrapper { height: 60vh; }
    .caption { left: 16px; font-size: 12px; padding: 6px 8px; }
  }
</style>

<!-- Swiper carousel + labels -->
<div class="wrapper">
  <div class="label-container" id="labelContainer">
    {% for media in product.media %}
      {% if media.media_type == 'image' %}
        <div class="vertical-label">
          {{ media.alt | default: "Slide " | append: forloop.index }}
        </div>
      {% endif %}
    {% endfor %}
  </div>

  <div class="swiper">
    <div class="swiper-wrapper">
      {% for media in product.media %}
        {% if media.media_type == 'image' %}
          <div class="swiper-slide">
            <img
              src="{{ media.preview_image.src | img_url: '2048x2048' }}"
              alt="{{ media.alt }}"
            />
            <div class="caption">
              {{ media.alt | default: "Slide " | append: forloop.index }}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<!-- Product info + form -->
<div class="product-info">
  <h1>{{ product.title }}</h1>
  <p>{{ product.price | money }}</p>
  <p>{{ product.description }}</p>
</div>

<div class="product-form">
  {% form 'product', product %}
    {% assign current_variant = product.selected_or_first_available_variant %}

    <select name="id">
      {% for variant in product.variants %}
        <option value="{{ variant.id }}" {% if variant == current_variant %}selected{% endif %}>
          {{ variant.title }} - {{ variant.price | money }}
        </option>
      {% endfor %}
    </select>

    <input type="number" name="quantity" min="1" value="1" />
    <button type="submit">Add to cart</button>
    {{ form | payment_button }}
  {% endform %}
</div>

<!-- include Swiper JS & init script -->
<script src="https://unpkg.com/swiper/swiper-bundle.min.js"></script>
<script>
  function getImageBrightness(img) {
    img.crossOrigin = 'anonymous';
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    const w = 50, h = 50;
    canvas.width = w; canvas.height = h;
    ctx.drawImage(img, 0, 0, w, h);
    const data = ctx.getImageData(0, 0, w, h).data;
    let sum = 0, count = data.length/4;
    for (let i = 0; i < data.length; i += 4) {
      sum += (data[i] + data[i+1] + data[i+2]) / 3;
    }
    return sum / count;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const swiper = new Swiper('.swiper', {
      loop: false,
      keyboard: { enabled: true },
      on: { slideChange: () => updateLabels(swiper.activeIndex) }
    });

    const labels = document.querySelectorAll('.vertical-label');
    const slides = document.querySelectorAll('.swiper-slide');

    // evenly space labels vertically to avoid overlap
    labels.forEach((label, idx) => {
      const percent = (idx + 1) * 100 / (labels.length + 1);
      label.style.top = `${percent}%`;
      label.addEventListener('click', () => {
        swiper.slideTo(idx);
        updateLabels(idx);
      });
    });

    function updateLabels(activeIndex) {
      labels.forEach((label, idx) => {
        label.classList.toggle('shifted', idx <= activeIndex);
      });
      const img = slides[activeIndex].querySelector('img');
      if (img.complete) applyColor(img);
      else img.onload = () => applyColor(img);
    }

    function applyColor(img) {
      const brightness = getImageBrightness(img);
      const textColor = brightness > 128 ? 'black' : 'white';
      labels.forEach(label => label.style.color = textColor);
    }

    updateLabels(0);
  });
</script>
